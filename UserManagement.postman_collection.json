{
	"info": {
		"_postman_id": "91ff71a4-7c93-4767-afc8-ecaddbfe04d7",
		"name": "UserManagement",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41672977"
	},
	"item": [
		{
			"name": "Create",
			"item": [
				{
					"name": "Create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									" \r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									" \r",
									" \r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  const variableUserName = pm.collectionVariables.get(\"registerLoginUserName\");\r",
									" \r",
									"    console.log(\"Variable username: \" + variableUserName)\r",
									" \r",
									" \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
									" \r",
									"  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
									" \r",
									"  pm.expect(responseData.user.username).to.exist.and.to.be.a('string')\r",
									"    .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
									"    .to.equal(variableUserName);\r",
									" \r",
									"  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string')\r",
									"    .and.to.have.lengthOf.at.least(1, \"Full name should not be empty\")\r",
									"    .to.equal(\"Vardenis Pavardenis\");\r",
									" \r",
									"  pm.expect(responseData.user.email).to.exist.and.to.be.a('string')\r",
									"    .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
									"    .to.eq(\"demo@demo.com\");\r",
									" \r",
									"});\r",
									" \r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a unique username  by appending a timestamp\r",
									"const uniqueUsername = \"test_user_\" + Date.now();\r",
									"// Generate a unique password  by appending a timestamp\r",
									"const uniquePassword = \"psw\" + Date.now();\r",
									" \r",
									"pm.collectionVariables.set(\"registerLoginUserName\", uniqueUsername)\r",
									"pm.collectionVariables.set(\"registerLoginPassword\", uniquePassword)\r",
									" \r",
									"// Just print in order to check if we got value of variables by name:\r",
									"// console.log(pm.collectionVariables.get(\"registerLoginUserName\"))\r",
									"// console.log(pm.collectionVariables.get(\"registerLoginPassword\"))\r",
									" \r",
									"/*\r",
									"    GENERATE UNIQUE USERNAME, PASSWORD AND\r",
									"    ADD INTO REQUEST BODY\r",
									" */\r",
									"\r",
									"// // Generate a unique username  by appending a timestamp\r",
									"// const uniqueUsername = \"test_user_\" + Date.now();\r",
									"// // Generate a unique password  by appending a timestamp\r",
									"// const uniquePassword = \"psw\" + Date.now();\r",
									" \r",
									"// // create obj for request body\r",
									"// let requestBody =  {\r",
									"//     \"username\": uniqueUsername,\r",
									"//     \"password\": uniquePassword,\r",
									"//     \"fullName\": \"Vardenis Pavardenis\",\r",
									"//     \"email\": \"demo@demo.com\"\r",
									"// }\r",
									" \r",
									"// // add obj into request body\r",
									"// pm.request.body.raw = JSON.stringify(requestBody)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//     \"username\": \"test_user_09\", \r\n//     \"password\": \"12345\", \r\n//     \"fullName\": \"Vardenis Pavardenis\", \r\n//     \"email\": \"demo@demo.com\"\r\n// }\r\n\r\n{\r\n    \"username\": \"{{registerLoginUserName}}\",\r\n    \"password\": \"{{registerLoginPassword}}\",\r\n    \"fullName\": \"Vardenis Pavardenis\",\r\n    \"email\": \"demo@demo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user without email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has error field\", function () {\r",
									"    pm.response.to.have.jsonBody('error');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"test_user_06\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user with existing user name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for response status code 400\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"// Test for the presence of the required field - error\r",
									"pm.test(\"Response has the required field - error\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.error).to.exist;\r",
									"});\r",
									"\r",
									"// Test for response time to be less than 300ms\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"// Test for Content-Type header to be application/json\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for error field to be a non-empty string\r",
									"pm.test(\"Error field is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user without user name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields for successful registration\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.username).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"CreatedAt field is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid email format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"dfghf\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user without password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.error).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Create new user for login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									" \r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									" \r",
									" \r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  const variableUserName = pm.collectionVariables.get(\"LoginUserName\");\r",
									" \r",
									"    console.log(\"Variable username: \" + variableUserName)\r",
									" \r",
									" \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
									" \r",
									"  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
									" \r",
									"  pm.expect(responseData.user.username).to.exist.and.to.be.a('string')\r",
									"    .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
									"    .to.equal(variableUserName);\r",
									" \r",
									"  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string')\r",
									"    .and.to.have.lengthOf.at.least(1, \"Full name should not be empty\")\r",
									"    .to.equal(\"Vardenis Pavardenis\");\r",
									" \r",
									"  pm.expect(responseData.user.email).to.exist.and.to.be.a('string')\r",
									"    .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
									"    .to.eq(\"demo@demo.com\");\r",
									" \r",
									"});\r",
									" \r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a unique username  by appending a timestamp\r",
									"const uniqueUsername = \"test_user_\" + Date.now();\r",
									"// Generate a unique password  by appending a timestamp\r",
									"const uniquePassword = \"psw\" + Date.now();\r",
									" \r",
									"pm.collectionVariables.set(\"loginUserName\", uniqueUsername)\r",
									"pm.collectionVariables.set(\"loginPassword\", uniquePassword)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//     \"username\": \"test_user_09\", \r\n//     \"password\": \"12345\", \r\n//     \"fullName\": \"Vardenis Pavardenis\", \r\n//     \"email\": \"demo@demo.com\"\r\n// }\r\n\r\n{\r\n    \"username\": \"{{loginUserName}}\",\r\n    \"password\": \"{{loginPassword}}\",\r\n    \"fullName\": \"Vardenis Pavardenis\",\r\n    \"email\": \"demo@demo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"User object schema is valid\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
									"  pm.expect(responseData.user.username).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
									"  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
									"  pm.expect(responseData.user.email).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{loginUserName}}\",\r\n    \"password\": \"{{loginPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with wrong name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.error).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"test_05\", \r\n    \"password\": \"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with wrong psw",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field 'error'\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.error).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema matches the expected format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('error').that.is.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"test_user_05\", \r\n    \"password\": \"1235\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login without psw",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.error).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"test_user_05\", \r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get user details",
			"item": [
				{
					"name": "Positive user details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const variableUserName = pm.collectionVariables.get(\"registerGetUserName\");\r",
									"const responseData = pm.response.json();\r",
									" \r",
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									" \r",
									"// Test for response body schema and properties\r",
									"pm.test(\"Response body has the expected properties\", function () {\r",
									"    pm.expect(responseData).to.have.property('username');\r",
									"    pm.expect(responseData.username).to.exist.and.to.be.a('string')\r",
									"        .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
									"        .to.equal(variableUserName);\r",
									" \r",
									"    pm.expect(responseData).to.have.property('fullName');\r",
									"    pm.expect(responseData.fullName).to.exist.and.to.be.a('string')\r",
									"        .and.to.have.lengthOf.at.least(1, \"FullName should not be empty\")\r",
									"        .to.equal(\"Vardenis Pavardenis\");\r",
									" \r",
									"    pm.expect(responseData).to.have.property('email');\r",
									"    pm.expect(responseData.email).to.exist.and.to.be.a('string')\r",
									"        .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
									"        .to.equal(\"demo@demo.com\");\r",
									"});\r",
									" \r",
									"// Test for response headers\r",
									"pm.test(\"Content-Type header is present and has a specific value\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/user/{{loginUserName}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"{{loginUserName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative non-existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									" \r",
									"// Test for status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									" \r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									" \r",
									"// Test for response body schema and properties\r",
									"pm.test(\"Response body has the expected property and value\", function () {\r",
									"    pm.expect(responseData).to.have.property('error');\r",
									" \r",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string')\r",
									"        .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
									"        .to.equal(\"User not found\");\r",
									"});\r",
									" \r",
									"// Test for response headers\r",
									"pm.test(\"Content-Type header is present and has a specific value\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a unique non-extisting username  by appending a timestamp\r",
									"const uniqueUsername = \"non-exiting_user_\" + Date.now();\r",
									" \r",
									"pm.collectionVariables.set(\"registerGetNenExitstingUserName\", uniqueUsername)\r",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/user/{{registerGetNenExitstingUserName}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"{{registerGetNenExitstingUserName}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Logout",
			"item": [
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "registerLoginUserName",
			"value": ""
		},
		{
			"key": "registerLoginPassword",
			"value": ""
		},
		{
			"key": "loginUserName",
			"value": ""
		},
		{
			"key": "loginPassword",
			"value": ""
		},
		{
			"key": "registerGetNenExitstingUserName",
			"value": ""
		}
	]
}