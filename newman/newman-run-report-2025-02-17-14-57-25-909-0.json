{
  "collection": {
    "_": {
      "postman_id": "91ff71a4-7c93-4767-afc8-ecaddbfe04d7",
      "exporter_id": "41672977"
    },
    "item": [
      {
        "id": "7dcdce51-880a-4155-b6f6-4dae1a72a6c8",
        "name": "Create",
        "item": [
          {
            "id": "b8ba88eb-c376-4dfb-8ab2-f032e43cb847",
            "name": "Create new user",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "register"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "// {\r\n//     \"username\": \"test_user_09\", \r\n//     \"password\": \"12345\", \r\n//     \"fullName\": \"Vardenis Pavardenis\", \r\n//     \"email\": \"demo@demo.com\"\r\n// }\r\n\r\n{\r\n    \"username\": \"{{registerLoginUserName}}\",\r\n    \"password\": \"{{registerLoginPassword}}\",\r\n    \"fullName\": \"Vardenis Pavardenis\",\r\n    \"email\": \"demo@demo.com\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "598d4ea5-95d0-47d6-bbb2-4fcb8132416f",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response time is less than 200ms\", function () {\r",
                    "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                    "});\r",
                    " \r",
                    "pm.test(\"Response status code is 201\", function () {\r",
                    "  pm.expect(pm.response.code).to.equal(201);\r",
                    "});\r",
                    " \r",
                    " \r",
                    "pm.test(\"Response has the required fields\", function () {\r",
                    "  const responseData = pm.response.json();\r",
                    "  const variableUserName = pm.collectionVariables.get(\"registerLoginUserName\");\r",
                    " \r",
                    "    console.log(\"Variable username: \" + variableUserName)\r",
                    " \r",
                    " \r",
                    "  pm.expect(responseData).to.be.an('object');\r",
                    "  pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                    " \r",
                    "  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                    " \r",
                    "  pm.expect(responseData.user.username).to.exist.and.to.be.a('string')\r",
                    "    .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                    "    .to.equal(variableUserName);\r",
                    " \r",
                    "  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string')\r",
                    "    .and.to.have.lengthOf.at.least(1, \"Full name should not be empty\")\r",
                    "    .to.equal(\"Vardenis Pavardenis\");\r",
                    " \r",
                    "  pm.expect(responseData.user.email).to.exist.and.to.be.a('string')\r",
                    "    .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
                    "    .to.eq(\"demo@demo.com\");\r",
                    " \r",
                    "});\r",
                    " \r",
                    "pm.test(\"Response body is in JSON format\", function () {\r",
                    "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "4763b52f-29e8-4c3e-bdad-021225a160a8"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "a7c11470-4b17-4567-8c09-e600348145cf",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Generate a unique username  by appending a timestamp\r",
                    "const uniqueUsername = \"test_user_\" + Date.now();\r",
                    "// Generate a unique password  by appending a timestamp\r",
                    "const uniquePassword = \"psw\" + Date.now();\r",
                    " \r",
                    "pm.collectionVariables.set(\"registerLoginUserName\", uniqueUsername)\r",
                    "pm.collectionVariables.set(\"registerLoginPassword\", uniquePassword)\r",
                    " \r",
                    "// Just print in order to check if we got value of variables by name:\r",
                    "// console.log(pm.collectionVariables.get(\"registerLoginUserName\"))\r",
                    "// console.log(pm.collectionVariables.get(\"registerLoginPassword\"))\r",
                    " \r",
                    "/*\r",
                    "    GENERATE UNIQUE USERNAME, PASSWORD AND\r",
                    "    ADD INTO REQUEST BODY\r",
                    " */\r",
                    "\r",
                    "// // Generate a unique username  by appending a timestamp\r",
                    "// const uniqueUsername = \"test_user_\" + Date.now();\r",
                    "// // Generate a unique password  by appending a timestamp\r",
                    "// const uniquePassword = \"psw\" + Date.now();\r",
                    " \r",
                    "// // create obj for request body\r",
                    "// let requestBody =  {\r",
                    "//     \"username\": uniqueUsername,\r",
                    "//     \"password\": uniquePassword,\r",
                    "//     \"fullName\": \"Vardenis Pavardenis\",\r",
                    "//     \"email\": \"demo@demo.com\"\r",
                    "// }\r",
                    " \r",
                    "// // add obj into request body\r",
                    "// pm.request.body.raw = JSON.stringify(requestBody)"
                  ],
                  "_lastExecutionId": "16128638-2710-41df-af8b-1c157913ddb9"
                }
              }
            ]
          },
          {
            "id": "84a1213d-f50d-4f92-835b-133849c8c256",
            "name": "Create new user without email",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "register"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\": \"test_user_06\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3ac45a0c-3ab7-4337-8241-7a2a2a7172f7",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Response body has error field\", function () {\r",
                    "    pm.response.to.have.jsonBody('error');\r",
                    "});"
                  ],
                  "_lastExecutionId": "bc2be8de-d3a2-4363-b1d8-31ab6af96a25"
                }
              }
            ]
          },
          {
            "id": "5d562bd0-2423-4f07-b4bc-c7c795287fb6",
            "name": "Create new user with existing user name",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "register"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3178b386-a546-49e6-aa4e-4b2c4cc8e1f9",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Test for response status code 400\r",
                    "pm.test(\"Response status code is 400\", function () {\r",
                    "  pm.expect(pm.response.code).to.equal(400);\r",
                    "});\r",
                    "\r",
                    "// Test for the presence of the required field - error\r",
                    "pm.test(\"Response has the required field - error\", function () {\r",
                    "  const responseData = pm.response.json();\r",
                    "  \r",
                    "  pm.expect(responseData).to.be.an('object');\r",
                    "  pm.expect(responseData.error).to.exist;\r",
                    "});\r",
                    "\r",
                    "// Test for response time to be less than 300ms\r",
                    "pm.test(\"Response time is less than 300ms\", function () {\r",
                    "  pm.expect(pm.response.responseTime).to.be.below(300);\r",
                    "});\r",
                    "\r",
                    "// Test for Content-Type header to be application/json\r",
                    "pm.test(\"Content-Type header is application/json\", function () {\r",
                    "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                    "});\r",
                    "\r",
                    "// Test for error field to be a non-empty string\r",
                    "pm.test(\"Error field is a non-empty string\", function () {\r",
                    "  const responseData = pm.response.json();\r",
                    "  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "d3ba8760-52ee-4dee-8939-9405186bff9f"
                }
              }
            ]
          },
          {
            "id": "1ae74ae3-8cde-4152-9085-6567c8cd1010",
            "name": "Create new user without user name",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "register"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"password\": \"dfghf\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cb0116c2-ba93-4c3f-882d-0a466aca1901",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 200\", function () {\r",
                    "  pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response time is less than 500ms\", function () {\r",
                    "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response has the required fields for successful registration\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "    \r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
                    "    pm.expect(responseData.username).to.exist.and.to.be.a('string');\r",
                    "    pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
                    "    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"CreatedAt field is in a valid date format\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "    \r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Email is in a valid email format\", function () {\r",
                    "  const responseData = pm.response.json();\r",
                    "  \r",
                    "  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "d8cca29c-4e27-4b2e-8e3d-21f1c906b4f1"
                }
              }
            ]
          },
          {
            "id": "3cc15b34-9d6f-4ea3-971e-05efed183662",
            "name": "Create new user without password",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "register"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8167e387-6d9a-4b45-893c-f7f3a1b560cc",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 400\", function () {\r",
                    "  pm.expect(pm.response.code).to.equal(400);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response has the required fields\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "    \r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.error).to.exist;\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Error message is a non-empty string\", function () {\r",
                    "  const responseData = pm.response.json();\r",
                    "  \r",
                    "  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response time is less than 500ms\", function () {\r",
                    "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "5b426933-680c-4cf6-9616-8c67ffab7321"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0421e9e5-4214-4bbf-b5cd-09e5f656fb36",
        "name": "Login",
        "item": [
          {
            "id": "97411efe-6a7c-4389-b307-fa442c945b16",
            "name": "Create new user for login",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "register"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "// {\r\n//     \"username\": \"test_user_09\", \r\n//     \"password\": \"12345\", \r\n//     \"fullName\": \"Vardenis Pavardenis\", \r\n//     \"email\": \"demo@demo.com\"\r\n// }\r\n\r\n{\r\n    \"username\": \"{{loginUserName}}\",\r\n    \"password\": \"{{loginPassword}}\",\r\n    \"fullName\": \"Vardenis Pavardenis\",\r\n    \"email\": \"demo@demo.com\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f05ec8c8-f128-42c5-9671-be52f2be4032",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response time is less than 200ms\", function () {\r",
                    "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                    "});\r",
                    " \r",
                    "pm.test(\"Response status code is 201\", function () {\r",
                    "  pm.expect(pm.response.code).to.equal(201);\r",
                    "});\r",
                    " \r",
                    " \r",
                    "pm.test(\"Response has the required fields\", function () {\r",
                    "  const responseData = pm.response.json();\r",
                    "  const variableUserName = pm.collectionVariables.get(\"LoginUserName\");\r",
                    " \r",
                    "    console.log(\"Variable username: \" + variableUserName)\r",
                    " \r",
                    " \r",
                    "  pm.expect(responseData).to.be.an('object');\r",
                    "  pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                    " \r",
                    "  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                    " \r",
                    "  pm.expect(responseData.user.username).to.exist.and.to.be.a('string')\r",
                    "    .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                    "    .to.equal(variableUserName);\r",
                    " \r",
                    "  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string')\r",
                    "    .and.to.have.lengthOf.at.least(1, \"Full name should not be empty\")\r",
                    "    .to.equal(\"Vardenis Pavardenis\");\r",
                    " \r",
                    "  pm.expect(responseData.user.email).to.exist.and.to.be.a('string')\r",
                    "    .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
                    "    .to.eq(\"demo@demo.com\");\r",
                    " \r",
                    "});\r",
                    " \r",
                    "pm.test(\"Response body is in JSON format\", function () {\r",
                    "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "934aa5aa-dac6-4a31-bf15-84ea022a0358"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "2ce2b657-ab77-4ad3-838d-2952a8861aaa",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Generate a unique username  by appending a timestamp\r",
                    "const uniqueUsername = \"test_user_\" + Date.now();\r",
                    "// Generate a unique password  by appending a timestamp\r",
                    "const uniquePassword = \"psw\" + Date.now();\r",
                    " \r",
                    "pm.collectionVariables.set(\"loginUserName\", uniqueUsername)\r",
                    "pm.collectionVariables.set(\"loginPassword\", uniquePassword)"
                  ],
                  "_lastExecutionId": "701e8e72-e9f9-40aa-8740-a705a5d97858"
                }
              }
            ]
          },
          {
            "id": "f4d57f87-bdaa-41b2-8d0b-75a0fdba14ca",
            "name": "Login",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "login"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\": \"{{loginUserName}}\",\r\n    \"password\": \"{{loginPassword}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "eae14b4b-645f-4dfd-b8cf-da3f71ca4390",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 200\", function () {\r",
                    "  pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response time is less than 500ms\", function () {\r",
                    "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Content-Type header is application/json\", function () {\r",
                    "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"User object schema is valid\", function () {\r",
                    "  const responseData = pm.response.json();\r",
                    "  \r",
                    "  pm.expect(responseData).to.be.an('object');\r",
                    "  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                    "  pm.expect(responseData.user.username).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                    "  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                    "  pm.expect(responseData.user.email).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "0521d87a-b120-4c3f-b28e-29f7969d857b"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "bdcc129e-1083-4329-be01-e18b3ba26fcc",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "85d1432f-f517-4336-9d83-0c0245c5d031"
                }
              }
            ]
          },
          {
            "id": "e66e0070-8ed8-47bc-af68-d2812d6fc73e",
            "name": "Login with wrong name",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "login"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\": \"test_05\", \r\n    \"password\": \"12345\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bc2f6b89-64a0-48b5-928c-be1a91c8037d",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 401\", function () {\r",
                    "  pm.expect(pm.response.code).to.equal(401);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response has the required fields\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "    \r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.error).to.exist;\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response time is less than 500ms\", function () {\r",
                    "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "5b403dc5-ef77-436e-b92a-b79ba4e5df47"
                }
              }
            ]
          },
          {
            "id": "4e4cdb3c-8d84-4262-b3a7-a5fb5b8259e9",
            "name": "Login with wrong psw",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "login"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\": \"test_user_05\", \r\n    \"password\": \"1235\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ec803906-c850-4c58-b4f6-09f3c9add9fd",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 401\", function () {\r",
                    "  pm.expect(pm.response.code).to.equal(401);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response has the required field 'error'\", function () {\r",
                    "  const responseData = pm.response.json();\r",
                    "  \r",
                    "  pm.expect(responseData).to.be.an('object');\r",
                    "  pm.expect(responseData.error).to.exist;\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response time is less than 500ms\", function () {\r",
                    "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Content-Type header is application/json\", function () {\r",
                    "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response schema matches the expected format\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "    \r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData).to.have.property('error').that.is.a('string');\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "33ee1fca-7b4e-455a-afc3-ff92de7ea7e1"
                }
              }
            ]
          },
          {
            "id": "edd70a89-82d2-4cc6-836d-2541c1c5c9e8",
            "name": "Login without psw",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "login"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\": \"test_user_05\", \r\n    \"password\": \"\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9a98aba9-975d-419f-9d3f-9956a6f463d8",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 401\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(401);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response has the required fields\", function () {\r",
                    "  const responseData = pm.response.json();\r",
                    "  \r",
                    "  pm.expect(responseData).to.be.an('object');\r",
                    "  pm.expect(responseData.error).to.exist;\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Error message is a non-empty string\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "    \r",
                    "    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response time is less than 500ms\", function () {\r",
                    "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "32c08e70-dbe1-4c4d-bade-5d392b01c6e1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f057e48e-ee5f-4d9b-b076-bd305b329701",
        "name": "Get user details",
        "item": [
          {
            "id": "91760365-c873-4f27-97ca-181337ca559b",
            "name": "Positive user details",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "user",
                  "{{loginUserName}}"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "01cdaa7b-bec8-4a0e-8e42-51017fca44e6",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "const variableUserName = pm.collectionVariables.get(\"registerGetUserName\");\r",
                    "const responseData = pm.response.json();\r",
                    " \r",
                    "// Test for status code\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    " \r",
                    "// Test for response time\r",
                    "pm.test(\"Response time is less than 200ms\", function () {\r",
                    "    pm.expect(pm.response.responseTime).to.be.below(200);\r",
                    "});\r",
                    " \r",
                    "// Test for response body schema and properties\r",
                    "pm.test(\"Response body has the expected properties\", function () {\r",
                    "    pm.expect(responseData).to.have.property('username');\r",
                    "    pm.expect(responseData.username).to.exist.and.to.be.a('string')\r",
                    "        .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                    "        .to.equal(variableUserName);\r",
                    " \r",
                    "    pm.expect(responseData).to.have.property('fullName');\r",
                    "    pm.expect(responseData.fullName).to.exist.and.to.be.a('string')\r",
                    "        .and.to.have.lengthOf.at.least(1, \"FullName should not be empty\")\r",
                    "        .to.equal(\"Vardenis Pavardenis\");\r",
                    " \r",
                    "    pm.expect(responseData).to.have.property('email');\r",
                    "    pm.expect(responseData.email).to.exist.and.to.be.a('string')\r",
                    "        .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
                    "        .to.equal(\"demo@demo.com\");\r",
                    "});\r",
                    " \r",
                    "// Test for response headers\r",
                    "pm.test(\"Content-Type header is present and has a specific value\", function () {\r",
                    "    pm.response.to.have.header(\"Content-Type\");\r",
                    "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "69987108-5693-4978-9142-b22c21721c7f"
                }
              }
            ]
          },
          {
            "id": "64ac0114-ac07-4420-b976-15aa0c26c6c4",
            "name": "Negative non-existing user",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "user",
                  "{{registerGetNenExitstingUserName}}"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "93b66907-3a50-4fd1-b25e-7d3856fe4f4b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "const responseData = pm.response.json();\r",
                    " \r",
                    "// Test for status code\r",
                    "pm.test(\"Status code is 404\", function () {\r",
                    "    pm.response.to.have.status(404);\r",
                    "});\r",
                    " \r",
                    "// Test for response time\r",
                    "pm.test(\"Response time is less than 200ms\", function () {\r",
                    "    pm.expect(pm.response.responseTime).to.be.below(200);\r",
                    "});\r",
                    " \r",
                    "// Test for response body schema and properties\r",
                    "pm.test(\"Response body has the expected property and value\", function () {\r",
                    "    pm.expect(responseData).to.have.property('error');\r",
                    " \r",
                    "    pm.expect(responseData.error).to.exist.and.to.be.a('string')\r",
                    "        .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                    "        .to.equal(\"User not found\");\r",
                    "});\r",
                    " \r",
                    "// Test for response headers\r",
                    "pm.test(\"Content-Type header is present and has a specific value\", function () {\r",
                    "    pm.response.to.have.header(\"Content-Type\");\r",
                    "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "9f2a8fe2-7629-4f5e-bc96-cdd9f01c6a8c"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "1be7356d-a286-4369-a060-9ca613acc806",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Generate a unique non-extisting username  by appending a timestamp\r",
                    "const uniqueUsername = \"non-exiting_user_\" + Date.now();\r",
                    " \r",
                    "pm.collectionVariables.set(\"registerGetNenExitstingUserName\", uniqueUsername)\r",
                    " "
                  ],
                  "_lastExecutionId": "1196b473-27f7-4d5a-9612-2ace38a09bbf"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1803c6ea-e1ff-48fb-bd62-5355f130df03",
        "name": "Logout",
        "item": [
          {
            "id": "d0ff67ab-6cda-4e61-b40a-a5ac0fb1d878",
            "name": "Logout",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "logout"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b39466e3-de9c-4e37-8447-ce0ec54def06",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 200\", function () {\r",
                    "  pm.expect(pm.response.code).to.equal(200);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response time is within an acceptable range\", function () {\r",
                    "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response has the required fields\", function () {\r",
                    "  const responseData = pm.response.json();\r",
                    "  \r",
                    "  pm.expect(responseData).to.be.an('object');\r",
                    "  pm.expect(responseData.message).to.exist;\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Message is a non-empty string\", function () {\r",
                    "  const responseData = pm.response.json();\r",
                    "  \r",
                    "  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should be a non-empty string\");\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Content-Type header is application/json\", function () {\r",
                    "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "3aafcd6e-9a16-4104-8445-909ed93a1e26"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "eb3a4eed-ae90-4304-aab1-ae606567fcc8",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "d2fd82cc-bab1-40a3-9ca7-97d5c96510e4"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "d034736f-c390-486a-b9af-0fc86760bc4b",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "4f4f084f-c514-4b71-8e8a-2574f70b0ef3"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "",
        "key": "registerLoginUserName"
      },
      {
        "type": "any",
        "value": "",
        "key": "registerLoginPassword"
      },
      {
        "type": "any",
        "value": "",
        "key": "loginUserName"
      },
      {
        "type": "any",
        "value": "",
        "key": "loginPassword"
      },
      {
        "type": "any",
        "value": "",
        "key": "registerGetNenExitstingUserName"
      }
    ],
    "info": {
      "_postman_id": "91ff71a4-7c93-4767-afc8-ecaddbfe04d7",
      "name": "UserManagement",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "7da389a7-360b-4d2d-88e9-0141059760be",
    "values": []
  },
  "globals": {
    "id": "36f1bb7a-59a0-443c-857c-03cb6ece85e3",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 43,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 53,
        "pending": 0,
        "failed": 6
      },
      "testScripts": {
        "total": 26,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 17,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 7.076923076923077,
      "responseMin": 3,
      "responseMax": 24,
      "responseSd": 5.312706661486771,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1739804244617,
      "completed": 1739804245901
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 13,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5ee79215-98a3-4a61-9ee3-84116a67d33f",
          "httpRequestId": "ebf4565a-1715-4580-83ab-cadd4f5c214a"
        },
        "item": {
          "id": "b8ba88eb-c376-4dfb-8ab2-f032e43cb847",
          "name": "Create new user",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "// {\r\n//     \"username\": \"test_user_09\", \r\n//     \"password\": \"12345\", \r\n//     \"fullName\": \"Vardenis Pavardenis\", \r\n//     \"email\": \"demo@demo.com\"\r\n// }\r\n\r\n{\r\n    \"username\": \"{{registerLoginUserName}}\",\r\n    \"password\": \"{{registerLoginPassword}}\",\r\n    \"fullName\": \"Vardenis Pavardenis\",\r\n    \"email\": \"demo@demo.com\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "598d4ea5-95d0-47d6-bbb2-4fcb8132416f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  " \r",
                  "pm.test(\"Response status code is 201\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(201);\r",
                  "});\r",
                  " \r",
                  " \r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  const variableUserName = pm.collectionVariables.get(\"registerLoginUserName\");\r",
                  " \r",
                  "    console.log(\"Variable username: \" + variableUserName)\r",
                  " \r",
                  " \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "  pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                  " \r",
                  "  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                  " \r",
                  "  pm.expect(responseData.user.username).to.exist.and.to.be.a('string')\r",
                  "    .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                  "    .to.equal(variableUserName);\r",
                  " \r",
                  "  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string')\r",
                  "    .and.to.have.lengthOf.at.least(1, \"Full name should not be empty\")\r",
                  "    .to.equal(\"Vardenis Pavardenis\");\r",
                  " \r",
                  "  pm.expect(responseData.user.email).to.exist.and.to.be.a('string')\r",
                  "    .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
                  "    .to.eq(\"demo@demo.com\");\r",
                  " \r",
                  "});\r",
                  " \r",
                  "pm.test(\"Response body is in JSON format\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                  "});"
                ],
                "_lastExecutionId": "4763b52f-29e8-4c3e-bdad-021225a160a8"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a7c11470-4b17-4567-8c09-e600348145cf",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Generate a unique username  by appending a timestamp\r",
                  "const uniqueUsername = \"test_user_\" + Date.now();\r",
                  "// Generate a unique password  by appending a timestamp\r",
                  "const uniquePassword = \"psw\" + Date.now();\r",
                  " \r",
                  "pm.collectionVariables.set(\"registerLoginUserName\", uniqueUsername)\r",
                  "pm.collectionVariables.set(\"registerLoginPassword\", uniquePassword)\r",
                  " \r",
                  "// Just print in order to check if we got value of variables by name:\r",
                  "// console.log(pm.collectionVariables.get(\"registerLoginUserName\"))\r",
                  "// console.log(pm.collectionVariables.get(\"registerLoginPassword\"))\r",
                  " \r",
                  "/*\r",
                  "    GENERATE UNIQUE USERNAME, PASSWORD AND\r",
                  "    ADD INTO REQUEST BODY\r",
                  " */\r",
                  "\r",
                  "// // Generate a unique username  by appending a timestamp\r",
                  "// const uniqueUsername = \"test_user_\" + Date.now();\r",
                  "// // Generate a unique password  by appending a timestamp\r",
                  "// const uniquePassword = \"psw\" + Date.now();\r",
                  " \r",
                  "// // create obj for request body\r",
                  "// let requestBody =  {\r",
                  "//     \"username\": uniqueUsername,\r",
                  "//     \"password\": uniquePassword,\r",
                  "//     \"fullName\": \"Vardenis Pavardenis\",\r",
                  "//     \"email\": \"demo@demo.com\"\r",
                  "// }\r",
                  " \r",
                  "// // add obj into request body\r",
                  "// pm.request.body.raw = JSON.stringify(requestBody)"
                ],
                "_lastExecutionId": "16128638-2710-41df-af8b-1c157913ddb9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3eb9bee7-c2cd-4bf1-8cd4-a0b2d97272f3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "163",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "\n\n\n\n\n\n\r\n{\r\n    \"username\": \"test_user_1739804244664\",\r\n    \"password\": \"psw1739804244664\",\r\n    \"fullName\": \"Vardenis Pavardenis\",\r\n    \"email\": \"demo@demo.com\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "5a15a3a5-906a-4da6-8c6a-f449e370acda",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "145"
            },
            {
              "key": "ETag",
              "value": "W/\"91-t65pgxNjfS7txq79tRW/z5LB9+w\""
            },
            {
              "key": "Date",
              "value": "Mon, 17 Feb 2025 14:57:24 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              117,
              115,
              101,
              114,
              95,
              49,
              55,
              51,
              57,
              56,
              48,
              52,
              50,
              52,
              52,
              54,
              54,
              52,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              86,
              97,
              114,
              100,
              101,
              110,
              105,
              115,
              32,
              80,
              97,
              118,
              97,
              114,
              100,
              101,
              110,
              105,
              115,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              100,
              101,
              109,
              111,
              64,
              100,
              101,
              109,
              111,
              46,
              99,
              111,
              109,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 24,
          "responseSize": 145
        },
        "id": "b8ba88eb-c376-4dfb-8ab2-f032e43cb847",
        "assertions": [
          {
            "assertion": "Response time is less than 200ms",
            "skipped": false
          },
          {
            "assertion": "Response status code is 201",
            "skipped": false
          },
          {
            "assertion": "Response has the required fields",
            "skipped": false
          },
          {
            "assertion": "Response body is in JSON format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "43d3fdbd-6bea-4cf7-ae5c-fbabefb183b5",
          "length": 13,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "635bea42-03e2-4936-b5d4-3e1102713a69"
        },
        "item": {
          "id": "84a1213d-f50d-4f92-835b-133849c8c256",
          "name": "Create new user without email",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"test_user_06\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3ac45a0c-3ab7-4337-8241-7a2a2a7172f7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response body has error field\", function () {\r",
                  "    pm.response.to.have.jsonBody('error');\r",
                  "});"
                ],
                "_lastExecutionId": "bc2be8de-d3a2-4363-b1d8-31ab6af96a25"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "350222fe-cc9b-435a-8f4a-f26513ff2c72",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "104",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\": \"test_user_06\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "ec4fa40a-3309-4479-b348-cbb994522b27",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "35"
            },
            {
              "key": "ETag",
              "value": "W/\"23-4BJvIMLzh0whUGyrd0lrv+Uwmpk\""
            },
            {
              "key": "Date",
              "value": "Mon, 17 Feb 2025 14:57:24 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              65,
              108,
              108,
              32,
              102,
              105,
              101,
              108,
              100,
              115,
              32,
              97,
              114,
              101,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 35
        },
        "id": "84a1213d-f50d-4f92-835b-133849c8c256",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Response body has error field",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4ca8f87c-2523-4723-b595-3d5db48958f6",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e1803744-9ba8-4116-b7d6-c2e443fd56b4"
        },
        "item": {
          "id": "5d562bd0-2423-4f07-b4bc-c7c795287fb6",
          "name": "Create new user with existing user name",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3178b386-a546-49e6-aa4e-4b2c4cc8e1f9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test for response status code 400\r",
                  "pm.test(\"Response status code is 400\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(400);\r",
                  "});\r",
                  "\r",
                  "// Test for the presence of the required field - error\r",
                  "pm.test(\"Response has the required field - error\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "  pm.expect(responseData.error).to.exist;\r",
                  "});\r",
                  "\r",
                  "// Test for response time to be less than 300ms\r",
                  "pm.test(\"Response time is less than 300ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(300);\r",
                  "});\r",
                  "\r",
                  "// Test for Content-Type header to be application/json\r",
                  "pm.test(\"Content-Type header is application/json\", function () {\r",
                  "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "// Test for error field to be a non-empty string\r",
                  "pm.test(\"Error field is a non-empty string\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "d3ba8760-52ee-4dee-8939-9405186bff9f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "94ae1ab8-e301-4a8e-8b6d-3ac673bf411b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "136",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "202dca84-faa4-4d81-a658-93292dac8c82",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "35"
            },
            {
              "key": "ETag",
              "value": "W/\"23-T8MAkPyiwfq0p1FbgOLvpuzEOlQ\""
            },
            {
              "key": "Date",
              "value": "Mon, 17 Feb 2025 14:57:24 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 35
        },
        "id": "5d562bd0-2423-4f07-b4bc-c7c795287fb6",
        "assertions": [
          {
            "assertion": "Response status code is 400",
            "skipped": false
          },
          {
            "assertion": "Response has the required field - error",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 300ms",
            "skipped": false
          },
          {
            "assertion": "Content-Type header is application/json",
            "skipped": false
          },
          {
            "assertion": "Error field is a non-empty string",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3fa7435a-f94e-4d53-aa0e-6ccebcf69600",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9426f3bc-70ae-48b5-a98d-695c0b065065"
        },
        "item": {
          "id": "1ae74ae3-8cde-4152-9085-6567c8cd1010",
          "name": "Create new user without user name",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"password\": \"dfghf\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cb0116c2-ba93-4c3f-882d-0a466aca1901",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields for successful registration\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
                  "    pm.expect(responseData.username).to.exist.and.to.be.a('string');\r",
                  "    pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
                  "    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"CreatedAt field is in a valid date format\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Email is in a valid email format\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "d8cca29c-4e27-4b2e-8e3d-21f1c906b4f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5d4c8084-a4c4-4e76-88f5-696c00e86ab0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "102",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"password\": \"dfghf\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "5b3a2195-781f-40ec-8b33-64be777d4581",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "35"
            },
            {
              "key": "ETag",
              "value": "W/\"23-4BJvIMLzh0whUGyrd0lrv+Uwmpk\""
            },
            {
              "key": "Date",
              "value": "Mon, 17 Feb 2025 14:57:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              65,
              108,
              108,
              32,
              102,
              105,
              101,
              108,
              100,
              115,
              32,
              97,
              114,
              101,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 35
        },
        "id": "1ae74ae3-8cde-4152-9085-6567c8cd1010",
        "assertions": [
          {
            "assertion": "Response status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false
          },
          {
            "assertion": "Response has the required fields for successful registration",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response has the required fields for successful registration",
              "message": "expected undefined to exist",
              "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:3:4)"
            }
          },
          {
            "assertion": "CreatedAt field is in a valid date format",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "CreatedAt field is in a valid date format",
              "message": "expected undefined to match /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/",
              "stack": "AssertionError: expected undefined to match /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/\n   at Object.eval sandbox-script.js:4:4)"
            }
          },
          {
            "assertion": "Email is in a valid email format",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Email is in a valid email format",
              "message": "expected undefined to match /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/",
              "stack": "AssertionError: expected undefined to match /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n   at Object.eval sandbox-script.js:5:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "bd43ecb6-bd3e-44c8-875a-25d66e282ca8",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "342688ed-c314-43ab-8a10-2e16be8e340d"
        },
        "item": {
          "id": "3cc15b34-9d6f-4ea3-971e-05efed183662",
          "name": "Create new user without password",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8167e387-6d9a-4b45-893c-f7f3a1b560cc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 400\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(400);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.error).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Error message is a non-empty string\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "5b426933-680c-4cf6-9616-8c67ffab7321"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2d8ac621-acba-4717-86ae-f3a501f57f86",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "109",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "e17d6ed4-357e-4be5-be48-2f47f092f197",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "35"
            },
            {
              "key": "ETag",
              "value": "W/\"23-4BJvIMLzh0whUGyrd0lrv+Uwmpk\""
            },
            {
              "key": "Date",
              "value": "Mon, 17 Feb 2025 14:57:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              65,
              108,
              108,
              32,
              102,
              105,
              101,
              108,
              100,
              115,
              32,
              97,
              114,
              101,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 35
        },
        "id": "3cc15b34-9d6f-4ea3-971e-05efed183662",
        "assertions": [
          {
            "assertion": "Response status code is 400",
            "skipped": false
          },
          {
            "assertion": "Response has the required fields",
            "skipped": false
          },
          {
            "assertion": "Error message is a non-empty string",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "edb7eac9-6777-4f98-baa0-f83d97507408",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a0326b1f-5f5e-4ae9-848c-9643271c2846"
        },
        "item": {
          "id": "97411efe-6a7c-4389-b307-fa442c945b16",
          "name": "Create new user for login",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "// {\r\n//     \"username\": \"test_user_09\", \r\n//     \"password\": \"12345\", \r\n//     \"fullName\": \"Vardenis Pavardenis\", \r\n//     \"email\": \"demo@demo.com\"\r\n// }\r\n\r\n{\r\n    \"username\": \"{{loginUserName}}\",\r\n    \"password\": \"{{loginPassword}}\",\r\n    \"fullName\": \"Vardenis Pavardenis\",\r\n    \"email\": \"demo@demo.com\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f05ec8c8-f128-42c5-9671-be52f2be4032",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  " \r",
                  "pm.test(\"Response status code is 201\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(201);\r",
                  "});\r",
                  " \r",
                  " \r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  const variableUserName = pm.collectionVariables.get(\"LoginUserName\");\r",
                  " \r",
                  "    console.log(\"Variable username: \" + variableUserName)\r",
                  " \r",
                  " \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "  pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                  " \r",
                  "  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                  " \r",
                  "  pm.expect(responseData.user.username).to.exist.and.to.be.a('string')\r",
                  "    .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                  "    .to.equal(variableUserName);\r",
                  " \r",
                  "  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string')\r",
                  "    .and.to.have.lengthOf.at.least(1, \"Full name should not be empty\")\r",
                  "    .to.equal(\"Vardenis Pavardenis\");\r",
                  " \r",
                  "  pm.expect(responseData.user.email).to.exist.and.to.be.a('string')\r",
                  "    .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
                  "    .to.eq(\"demo@demo.com\");\r",
                  " \r",
                  "});\r",
                  " \r",
                  "pm.test(\"Response body is in JSON format\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                  "});"
                ],
                "_lastExecutionId": "934aa5aa-dac6-4a31-bf15-84ea022a0358"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2ce2b657-ab77-4ad3-838d-2952a8861aaa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Generate a unique username  by appending a timestamp\r",
                  "const uniqueUsername = \"test_user_\" + Date.now();\r",
                  "// Generate a unique password  by appending a timestamp\r",
                  "const uniquePassword = \"psw\" + Date.now();\r",
                  " \r",
                  "pm.collectionVariables.set(\"loginUserName\", uniqueUsername)\r",
                  "pm.collectionVariables.set(\"loginPassword\", uniquePassword)"
                ],
                "_lastExecutionId": "701e8e72-e9f9-40aa-8740-a705a5d97858"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2b644012-683e-4483-bc3f-e71e9387e053",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "163",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "\n\n\n\n\n\n\r\n{\r\n    \"username\": \"test_user_1739804245175\",\r\n    \"password\": \"psw1739804245175\",\r\n    \"fullName\": \"Vardenis Pavardenis\",\r\n    \"email\": \"demo@demo.com\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "0e4300c1-c1df-46b1-9d6f-b079dce9a0ce",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "145"
            },
            {
              "key": "ETag",
              "value": "W/\"91-uMZ4Tz+TiqjZ/DI1kKNptHt8kmA\""
            },
            {
              "key": "Date",
              "value": "Mon, 17 Feb 2025 14:57:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              117,
              115,
              101,
              114,
              95,
              49,
              55,
              51,
              57,
              56,
              48,
              52,
              50,
              52,
              53,
              49,
              55,
              53,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              86,
              97,
              114,
              100,
              101,
              110,
              105,
              115,
              32,
              80,
              97,
              118,
              97,
              114,
              100,
              101,
              110,
              105,
              115,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              100,
              101,
              109,
              111,
              64,
              100,
              101,
              109,
              111,
              46,
              99,
              111,
              109,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 145
        },
        "id": "97411efe-6a7c-4389-b307-fa442c945b16",
        "assertions": [
          {
            "assertion": "Response time is less than 200ms",
            "skipped": false
          },
          {
            "assertion": "Response status code is 201",
            "skipped": false
          },
          {
            "assertion": "Response has the required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response has the required fields",
              "message": "Username should not be empty: expected 'test_user_1739804245175' to equal undefined",
              "stack": "AssertionError: Username should not be empty: expected 'test_user_1739804245175' to equal undefined\n   at Object.eval sandbox-script.js:3:6)"
            }
          },
          {
            "assertion": "Response body is in JSON format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f8212cae-7964-408c-a705-9eecfc98b59c",
          "length": 13,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a4760b1c-0a33-4479-8361-33e28c2d3ea5"
        },
        "item": {
          "id": "f4d57f87-bdaa-41b2-8d0b-75a0fdba14ca",
          "name": "Login",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"{{loginUserName}}\",\r\n    \"password\": \"{{loginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eae14b4b-645f-4dfd-b8cf-da3f71ca4390",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content-Type header is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"User object schema is valid\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                  "  pm.expect(responseData.user.username).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                  "  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                  "  pm.expect(responseData.user.email).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "0521d87a-b120-4c3f-b28e-29f7969d857b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bdcc129e-1083-4329-be01-e18b3ba26fcc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "85d1432f-f517-4336-9d83-0c0245c5d031"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "97ac3ac0-07a8-4dc4-a177-40aa2e4c12ea",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "84",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\": \"test_user_1739804245175\",\r\n    \"password\": \"psw1739804245175\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "fa059776-5c33-47af-a168-0fb8c7e14a49",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "133"
            },
            {
              "key": "ETag",
              "value": "W/\"85-q0Yu4712ytuxY6f0PvgzVsN/fdA\""
            },
            {
              "key": "Date",
              "value": "Mon, 17 Feb 2025 14:57:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              76,
              111,
              103,
              105,
              110,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              117,
              115,
              101,
              114,
              95,
              49,
              55,
              51,
              57,
              56,
              48,
              52,
              50,
              52,
              53,
              49,
              55,
              53,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              86,
              97,
              114,
              100,
              101,
              110,
              105,
              115,
              32,
              80,
              97,
              118,
              97,
              114,
              100,
              101,
              110,
              105,
              115,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              100,
              101,
              109,
              111,
              64,
              100,
              101,
              109,
              111,
              46,
              99,
              111,
              109,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 133
        },
        "id": "f4d57f87-bdaa-41b2-8d0b-75a0fdba14ca",
        "assertions": [
          {
            "assertion": "Response status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false
          },
          {
            "assertion": "Content-Type header is application/json",
            "skipped": false
          },
          {
            "assertion": "User object schema is valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "70ca40b6-0531-4e0c-8ae7-583fae2fb442",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4f5153c5-bf8a-4424-9737-d36371361b52"
        },
        "item": {
          "id": "e66e0070-8ed8-47bc-af68-d2812d6fc73e",
          "name": "Login with wrong name",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"test_05\", \r\n    \"password\": \"12345\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc2f6b89-64a0-48b5-928c-be1a91c8037d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 401\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(401);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.error).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "5b403dc5-ef77-436e-b92a-b79ba4e5df47"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6570173d-8387-41a7-9772-d39fd52827fb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "58",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\": \"test_05\", \r\n    \"password\": \"12345\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "d9063ff4-226d-46bb-9567-521de8711076",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "40"
            },
            {
              "key": "ETag",
              "value": "W/\"28-iHGTIv7noT3UMayYgBivAszwTgE\""
            },
            {
              "key": "Date",
              "value": "Mon, 17 Feb 2025 14:57:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 40
        },
        "id": "e66e0070-8ed8-47bc-af68-d2812d6fc73e",
        "assertions": [
          {
            "assertion": "Response status code is 401",
            "skipped": false
          },
          {
            "assertion": "Response has the required fields",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0d62dc75-5dd5-4a01-8f85-72fcaf284467",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "cc7e2744-7136-4546-99dd-30f8e8f60c6b"
        },
        "item": {
          "id": "4e4cdb3c-8d84-4262-b3a7-a5fb5b8259e9",
          "name": "Login with wrong psw",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"test_user_05\", \r\n    \"password\": \"1235\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ec803906-c850-4c58-b4f6-09f3c9add9fd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 401\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(401);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required field 'error'\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "  pm.expect(responseData.error).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content-Type header is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response schema matches the expected format\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData).to.have.property('error').that.is.a('string');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "33ee1fca-7b4e-455a-afc3-ff92de7ea7e1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9031ea93-18c3-4e4c-89b6-4e83e1f91f0a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "62",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\": \"test_user_05\", \r\n    \"password\": \"1235\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "16b21029-2068-45bd-80cd-729ac664e8c8",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "40"
            },
            {
              "key": "ETag",
              "value": "W/\"28-iHGTIv7noT3UMayYgBivAszwTgE\""
            },
            {
              "key": "Date",
              "value": "Mon, 17 Feb 2025 14:57:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 40
        },
        "id": "4e4cdb3c-8d84-4262-b3a7-a5fb5b8259e9",
        "assertions": [
          {
            "assertion": "Response status code is 401",
            "skipped": false
          },
          {
            "assertion": "Response has the required field 'error'",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false
          },
          {
            "assertion": "Content-Type header is application/json",
            "skipped": false
          },
          {
            "assertion": "Response schema matches the expected format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2278a2b3-6bdf-4590-a209-38bc661c1feb",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "99460660-5282-44d4-9037-4c198c2e81cc"
        },
        "item": {
          "id": "edd70a89-82d2-4cc6-836d-2541c1c5c9e8",
          "name": "Login without psw",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"test_user_05\", \r\n    \"password\": \"\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9a98aba9-975d-419f-9d3f-9956a6f463d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 401\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(401);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "  pm.expect(responseData.error).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Error message is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "32c08e70-dbe1-4c4d-bade-5d392b01c6e1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1d8ad435-26f5-4120-9591-a98a9b6fb48d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "58",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\": \"test_user_05\", \r\n    \"password\": \"\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "c644e129-2293-40b6-8f02-d19d76dcc68d",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "40"
            },
            {
              "key": "ETag",
              "value": "W/\"28-iHGTIv7noT3UMayYgBivAszwTgE\""
            },
            {
              "key": "Date",
              "value": "Mon, 17 Feb 2025 14:57:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 40
        },
        "id": "edd70a89-82d2-4cc6-836d-2541c1c5c9e8",
        "assertions": [
          {
            "assertion": "Response status code is 401",
            "skipped": false
          },
          {
            "assertion": "Response has the required fields",
            "skipped": false
          },
          {
            "assertion": "Error message is a non-empty string",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a55f14ea-fcfe-4373-ad1c-170ffec78ea3",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9cb28544-c804-439f-8032-f50d05b8efe4"
        },
        "item": {
          "id": "91760365-c873-4f27-97ca-181337ca559b",
          "name": "Positive user details",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "user",
                "{{loginUserName}}"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "01cdaa7b-bec8-4a0e-8e42-51017fca44e6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const variableUserName = pm.collectionVariables.get(\"registerGetUserName\");\r",
                  "const responseData = pm.response.json();\r",
                  " \r",
                  "// Test for status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  " \r",
                  "// Test for response time\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  " \r",
                  "// Test for response body schema and properties\r",
                  "pm.test(\"Response body has the expected properties\", function () {\r",
                  "    pm.expect(responseData).to.have.property('username');\r",
                  "    pm.expect(responseData.username).to.exist.and.to.be.a('string')\r",
                  "        .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                  "        .to.equal(variableUserName);\r",
                  " \r",
                  "    pm.expect(responseData).to.have.property('fullName');\r",
                  "    pm.expect(responseData.fullName).to.exist.and.to.be.a('string')\r",
                  "        .and.to.have.lengthOf.at.least(1, \"FullName should not be empty\")\r",
                  "        .to.equal(\"Vardenis Pavardenis\");\r",
                  " \r",
                  "    pm.expect(responseData).to.have.property('email');\r",
                  "    pm.expect(responseData.email).to.exist.and.to.be.a('string')\r",
                  "        .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
                  "        .to.equal(\"demo@demo.com\");\r",
                  "});\r",
                  " \r",
                  "// Test for response headers\r",
                  "pm.test(\"Content-Type header is present and has a specific value\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\");\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                  "});"
                ],
                "_lastExecutionId": "69987108-5693-4978-9142-b22c21721c7f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "user",
              "test_user_1739804245175"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1c50947b-dd07-4f48-8ba1-fb0383d98bab",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "ca1fb71a-3c09-4fe9-b211-056e5b1806c8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "95"
            },
            {
              "key": "ETag",
              "value": "W/\"5f-r1oS//+H75nD/3utrylApa+ihwM\""
            },
            {
              "key": "Date",
              "value": "Mon, 17 Feb 2025 14:57:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              117,
              115,
              101,
              114,
              95,
              49,
              55,
              51,
              57,
              56,
              48,
              52,
              50,
              52,
              53,
              49,
              55,
              53,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              86,
              97,
              114,
              100,
              101,
              110,
              105,
              115,
              32,
              80,
              97,
              118,
              97,
              114,
              100,
              101,
              110,
              105,
              115,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              100,
              101,
              109,
              111,
              64,
              100,
              101,
              109,
              111,
              46,
              99,
              111,
              109,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 95
        },
        "id": "91760365-c873-4f27-97ca-181337ca559b",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 200ms",
            "skipped": false
          },
          {
            "assertion": "Response body has the expected properties",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response body has the expected properties",
              "message": "Username should not be empty: expected 'test_user_1739804245175' to equal undefined",
              "stack": "AssertionError: Username should not be empty: expected 'test_user_1739804245175' to equal undefined\n   at Object.eval sandbox-script.js:3:11)"
            }
          },
          {
            "assertion": "Content-Type header is present and has a specific value",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7644e19c-4440-424f-ac9e-018b7adee5ab",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cc86bd0f-683f-489b-8a10-31bec45004b1"
        },
        "item": {
          "id": "64ac0114-ac07-4420-b976-15aa0c26c6c4",
          "name": "Negative non-existing user",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "user",
                "{{registerGetNenExitstingUserName}}"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "93b66907-3a50-4fd1-b25e-7d3856fe4f4b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const responseData = pm.response.json();\r",
                  " \r",
                  "// Test for status code\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  " \r",
                  "// Test for response time\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  " \r",
                  "// Test for response body schema and properties\r",
                  "pm.test(\"Response body has the expected property and value\", function () {\r",
                  "    pm.expect(responseData).to.have.property('error');\r",
                  " \r",
                  "    pm.expect(responseData.error).to.exist.and.to.be.a('string')\r",
                  "        .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                  "        .to.equal(\"User not found\");\r",
                  "});\r",
                  " \r",
                  "// Test for response headers\r",
                  "pm.test(\"Content-Type header is present and has a specific value\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\");\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                  "});"
                ],
                "_lastExecutionId": "9f2a8fe2-7629-4f5e-bc96-cdd9f01c6a8c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1be7356d-a286-4369-a060-9ca613acc806",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Generate a unique non-extisting username  by appending a timestamp\r",
                  "const uniqueUsername = \"non-exiting_user_\" + Date.now();\r",
                  " \r",
                  "pm.collectionVariables.set(\"registerGetNenExitstingUserName\", uniqueUsername)\r",
                  " "
                ],
                "_lastExecutionId": "1196b473-27f7-4d5a-9612-2ace38a09bbf"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "user",
              "non-exiting_user_1739804245706"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "00f1705b-148c-4d2a-9506-5e26bc344e7e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "e6c3749f-8e30-4fc0-8449-39ea57be970a",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "ETag",
              "value": "W/\"1a-hq/hT0ORGTkTfyRpVCZ/JB/r8Eg\""
            },
            {
              "key": "Date",
              "value": "Mon, 17 Feb 2025 14:57:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 26
        },
        "id": "64ac0114-ac07-4420-b976-15aa0c26c6c4",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 200ms",
            "skipped": false
          },
          {
            "assertion": "Response body has the expected property and value",
            "skipped": false
          },
          {
            "assertion": "Content-Type header is present and has a specific value",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "79f9622b-75be-4e08-9513-6bb79d52d0b7",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "198ec729-9663-423c-a014-d71aecfec7ae"
        },
        "item": {
          "id": "d0ff67ab-6cda-4e61-b40a-a5ac0fb1d878",
          "name": "Logout",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "logout"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b39466e3-de9c-4e37-8447-ce0ec54def06",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is within an acceptable range\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "  pm.expect(responseData.message).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Message is a non-empty string\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should be a non-empty string\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content-Type header is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "3aafcd6e-9a16-4104-8445-909ed93a1e26"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "logout"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b4e1f317-3bf6-4005-92b1-83202b8e975f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "9ddb1e5d-2bff-429b-acf3-bf856d9b007b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "37"
            },
            {
              "key": "ETag",
              "value": "W/\"25-71uUsMgZY3FdZp9j1h5YMrBIOgg\""
            },
            {
              "key": "Date",
              "value": "Mon, 17 Feb 2025 14:57:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              76,
              111,
              103,
              103,
              101,
              100,
              32,
              111,
              117,
              116,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 37
        },
        "id": "d0ff67ab-6cda-4e61-b40a-a5ac0fb1d878",
        "assertions": [
          {
            "assertion": "Response status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response time is within an acceptable range",
            "skipped": false
          },
          {
            "assertion": "Response has the required fields",
            "skipped": false
          },
          {
            "assertion": "Message is a non-empty string",
            "skipped": false
          },
          {
            "assertion": "Content-Type header is application/json",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 841
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "794033c95a9dd6af10d53bfaa303dab8",
          "id": "25cedd60-aea6-42b5-ba02-506cc389bd63",
          "timestamp": 1739804245053,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1ae74ae3-8cde-4152-9085-6567c8cd1010",
          "name": "Create new user without user name",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"password\": \"dfghf\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cb0116c2-ba93-4c3f-882d-0a466aca1901",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields for successful registration\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
                  "    pm.expect(responseData.username).to.exist.and.to.be.a('string');\r",
                  "    pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
                  "    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"CreatedAt field is in a valid date format\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Email is in a valid email format\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "d8cca29c-4e27-4b2e-8e3d-21f1c906b4f1"
              }
            }
          ]
        },
        "parent": {
          "id": "7dcdce51-880a-4155-b6f6-4dae1a72a6c8",
          "name": "Create",
          "item": [
            {
              "id": "b8ba88eb-c376-4dfb-8ab2-f032e43cb847",
              "name": "Create new user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "// {\r\n//     \"username\": \"test_user_09\", \r\n//     \"password\": \"12345\", \r\n//     \"fullName\": \"Vardenis Pavardenis\", \r\n//     \"email\": \"demo@demo.com\"\r\n// }\r\n\r\n{\r\n    \"username\": \"{{registerLoginUserName}}\",\r\n    \"password\": \"{{registerLoginPassword}}\",\r\n    \"fullName\": \"Vardenis Pavardenis\",\r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "598d4ea5-95d0-47d6-bbb2-4fcb8132416f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      " \r",
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(201);\r",
                      "});\r",
                      " \r",
                      " \r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  const variableUserName = pm.collectionVariables.get(\"registerLoginUserName\");\r",
                      " \r",
                      "    console.log(\"Variable username: \" + variableUserName)\r",
                      " \r",
                      " \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                      " \r",
                      "  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      " \r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.be.a('string')\r",
                      "    .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                      "    .to.equal(variableUserName);\r",
                      " \r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string')\r",
                      "    .and.to.have.lengthOf.at.least(1, \"Full name should not be empty\")\r",
                      "    .to.equal(\"Vardenis Pavardenis\");\r",
                      " \r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.be.a('string')\r",
                      "    .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
                      "    .to.eq(\"demo@demo.com\");\r",
                      " \r",
                      "});\r",
                      " \r",
                      "pm.test(\"Response body is in JSON format\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4763b52f-29e8-4c3e-bdad-021225a160a8"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7c11470-4b17-4567-8c09-e600348145cf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Generate a unique username  by appending a timestamp\r",
                      "const uniqueUsername = \"test_user_\" + Date.now();\r",
                      "// Generate a unique password  by appending a timestamp\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      " \r",
                      "pm.collectionVariables.set(\"registerLoginUserName\", uniqueUsername)\r",
                      "pm.collectionVariables.set(\"registerLoginPassword\", uniquePassword)\r",
                      " \r",
                      "// Just print in order to check if we got value of variables by name:\r",
                      "// console.log(pm.collectionVariables.get(\"registerLoginUserName\"))\r",
                      "// console.log(pm.collectionVariables.get(\"registerLoginPassword\"))\r",
                      " \r",
                      "/*\r",
                      "    GENERATE UNIQUE USERNAME, PASSWORD AND\r",
                      "    ADD INTO REQUEST BODY\r",
                      " */\r",
                      "\r",
                      "// // Generate a unique username  by appending a timestamp\r",
                      "// const uniqueUsername = \"test_user_\" + Date.now();\r",
                      "// // Generate a unique password  by appending a timestamp\r",
                      "// const uniquePassword = \"psw\" + Date.now();\r",
                      " \r",
                      "// // create obj for request body\r",
                      "// let requestBody =  {\r",
                      "//     \"username\": uniqueUsername,\r",
                      "//     \"password\": uniquePassword,\r",
                      "//     \"fullName\": \"Vardenis Pavardenis\",\r",
                      "//     \"email\": \"demo@demo.com\"\r",
                      "// }\r",
                      " \r",
                      "// // add obj into request body\r",
                      "// pm.request.body.raw = JSON.stringify(requestBody)"
                    ],
                    "_lastExecutionId": "16128638-2710-41df-af8b-1c157913ddb9"
                  }
                }
              ]
            },
            {
              "id": "84a1213d-f50d-4f92-835b-133849c8c256",
              "name": "Create new user without email",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"test_user_06\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ac45a0c-3ab7-4337-8241-7a2a2a7172f7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body has error field\", function () {\r",
                      "    pm.response.to.have.jsonBody('error');\r",
                      "});"
                    ],
                    "_lastExecutionId": "bc2be8de-d3a2-4363-b1d8-31ab6af96a25"
                  }
                }
              ]
            },
            {
              "id": "5d562bd0-2423-4f07-b4bc-c7c795287fb6",
              "name": "Create new user with existing user name",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3178b386-a546-49e6-aa4e-4b2c4cc8e1f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for response status code 400\r",
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "\r",
                      "// Test for the presence of the required field - error\r",
                      "pm.test(\"Response has the required field - error\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "// Test for response time to be less than 300ms\r",
                      "pm.test(\"Response time is less than 300ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(300);\r",
                      "});\r",
                      "\r",
                      "// Test for Content-Type header to be application/json\r",
                      "pm.test(\"Content-Type header is application/json\", function () {\r",
                      "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "// Test for error field to be a non-empty string\r",
                      "pm.test(\"Error field is a non-empty string\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d3ba8760-52ee-4dee-8939-9405186bff9f"
                  }
                }
              ]
            },
            {
              "id": "1ae74ae3-8cde-4152-9085-6567c8cd1010",
              "name": "Create new user without user name",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"password\": \"dfghf\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cb0116c2-ba93-4c3f-882d-0a466aca1901",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields for successful registration\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
                      "    pm.expect(responseData.username).to.exist.and.to.be.a('string');\r",
                      "    pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
                      "    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"CreatedAt field is in a valid date format\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Email is in a valid email format\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d8cca29c-4e27-4b2e-8e3d-21f1c906b4f1"
                  }
                }
              ]
            },
            {
              "id": "3cc15b34-9d6f-4ea3-971e-05efed183662",
              "name": "Create new user without password",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8167e387-6d9a-4b45-893c-f7f3a1b560cc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Error message is a non-empty string\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5b426933-680c-4cf6-9616-8c67ffab7321"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3fa7435a-f94e-4d53-aa0e-6ccebcf69600",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9426f3bc-70ae-48b5-a98d-695c0b065065",
          "scriptId": "cb0116c2-ba93-4c3f-882d-0a466aca1901",
          "execution": "d8cca29c-4e27-4b2e-8e3d-21f1c906b4f1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response has the required fields for successful registration",
          "message": "expected undefined to exist",
          "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:3:4)",
          "checksum": "f6a88431bace50553112d59588ceec7a",
          "id": "46f8aaa7-b05e-44f7-8154-2e2bbb53e37d",
          "timestamp": 1739804245056,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "1ae74ae3-8cde-4152-9085-6567c8cd1010",
          "name": "Create new user without user name",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"password\": \"dfghf\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cb0116c2-ba93-4c3f-882d-0a466aca1901",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields for successful registration\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
                  "    pm.expect(responseData.username).to.exist.and.to.be.a('string');\r",
                  "    pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
                  "    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"CreatedAt field is in a valid date format\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Email is in a valid email format\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "d8cca29c-4e27-4b2e-8e3d-21f1c906b4f1"
              }
            }
          ]
        },
        "parent": {
          "id": "7dcdce51-880a-4155-b6f6-4dae1a72a6c8",
          "name": "Create",
          "item": [
            {
              "id": "b8ba88eb-c376-4dfb-8ab2-f032e43cb847",
              "name": "Create new user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "// {\r\n//     \"username\": \"test_user_09\", \r\n//     \"password\": \"12345\", \r\n//     \"fullName\": \"Vardenis Pavardenis\", \r\n//     \"email\": \"demo@demo.com\"\r\n// }\r\n\r\n{\r\n    \"username\": \"{{registerLoginUserName}}\",\r\n    \"password\": \"{{registerLoginPassword}}\",\r\n    \"fullName\": \"Vardenis Pavardenis\",\r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "598d4ea5-95d0-47d6-bbb2-4fcb8132416f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      " \r",
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(201);\r",
                      "});\r",
                      " \r",
                      " \r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  const variableUserName = pm.collectionVariables.get(\"registerLoginUserName\");\r",
                      " \r",
                      "    console.log(\"Variable username: \" + variableUserName)\r",
                      " \r",
                      " \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                      " \r",
                      "  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      " \r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.be.a('string')\r",
                      "    .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                      "    .to.equal(variableUserName);\r",
                      " \r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string')\r",
                      "    .and.to.have.lengthOf.at.least(1, \"Full name should not be empty\")\r",
                      "    .to.equal(\"Vardenis Pavardenis\");\r",
                      " \r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.be.a('string')\r",
                      "    .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
                      "    .to.eq(\"demo@demo.com\");\r",
                      " \r",
                      "});\r",
                      " \r",
                      "pm.test(\"Response body is in JSON format\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4763b52f-29e8-4c3e-bdad-021225a160a8"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7c11470-4b17-4567-8c09-e600348145cf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Generate a unique username  by appending a timestamp\r",
                      "const uniqueUsername = \"test_user_\" + Date.now();\r",
                      "// Generate a unique password  by appending a timestamp\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      " \r",
                      "pm.collectionVariables.set(\"registerLoginUserName\", uniqueUsername)\r",
                      "pm.collectionVariables.set(\"registerLoginPassword\", uniquePassword)\r",
                      " \r",
                      "// Just print in order to check if we got value of variables by name:\r",
                      "// console.log(pm.collectionVariables.get(\"registerLoginUserName\"))\r",
                      "// console.log(pm.collectionVariables.get(\"registerLoginPassword\"))\r",
                      " \r",
                      "/*\r",
                      "    GENERATE UNIQUE USERNAME, PASSWORD AND\r",
                      "    ADD INTO REQUEST BODY\r",
                      " */\r",
                      "\r",
                      "// // Generate a unique username  by appending a timestamp\r",
                      "// const uniqueUsername = \"test_user_\" + Date.now();\r",
                      "// // Generate a unique password  by appending a timestamp\r",
                      "// const uniquePassword = \"psw\" + Date.now();\r",
                      " \r",
                      "// // create obj for request body\r",
                      "// let requestBody =  {\r",
                      "//     \"username\": uniqueUsername,\r",
                      "//     \"password\": uniquePassword,\r",
                      "//     \"fullName\": \"Vardenis Pavardenis\",\r",
                      "//     \"email\": \"demo@demo.com\"\r",
                      "// }\r",
                      " \r",
                      "// // add obj into request body\r",
                      "// pm.request.body.raw = JSON.stringify(requestBody)"
                    ],
                    "_lastExecutionId": "16128638-2710-41df-af8b-1c157913ddb9"
                  }
                }
              ]
            },
            {
              "id": "84a1213d-f50d-4f92-835b-133849c8c256",
              "name": "Create new user without email",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"test_user_06\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ac45a0c-3ab7-4337-8241-7a2a2a7172f7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body has error field\", function () {\r",
                      "    pm.response.to.have.jsonBody('error');\r",
                      "});"
                    ],
                    "_lastExecutionId": "bc2be8de-d3a2-4363-b1d8-31ab6af96a25"
                  }
                }
              ]
            },
            {
              "id": "5d562bd0-2423-4f07-b4bc-c7c795287fb6",
              "name": "Create new user with existing user name",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3178b386-a546-49e6-aa4e-4b2c4cc8e1f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for response status code 400\r",
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "\r",
                      "// Test for the presence of the required field - error\r",
                      "pm.test(\"Response has the required field - error\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "// Test for response time to be less than 300ms\r",
                      "pm.test(\"Response time is less than 300ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(300);\r",
                      "});\r",
                      "\r",
                      "// Test for Content-Type header to be application/json\r",
                      "pm.test(\"Content-Type header is application/json\", function () {\r",
                      "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "// Test for error field to be a non-empty string\r",
                      "pm.test(\"Error field is a non-empty string\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d3ba8760-52ee-4dee-8939-9405186bff9f"
                  }
                }
              ]
            },
            {
              "id": "1ae74ae3-8cde-4152-9085-6567c8cd1010",
              "name": "Create new user without user name",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"password\": \"dfghf\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cb0116c2-ba93-4c3f-882d-0a466aca1901",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields for successful registration\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
                      "    pm.expect(responseData.username).to.exist.and.to.be.a('string');\r",
                      "    pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
                      "    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"CreatedAt field is in a valid date format\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Email is in a valid email format\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d8cca29c-4e27-4b2e-8e3d-21f1c906b4f1"
                  }
                }
              ]
            },
            {
              "id": "3cc15b34-9d6f-4ea3-971e-05efed183662",
              "name": "Create new user without password",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8167e387-6d9a-4b45-893c-f7f3a1b560cc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Error message is a non-empty string\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5b426933-680c-4cf6-9616-8c67ffab7321"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3fa7435a-f94e-4d53-aa0e-6ccebcf69600",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9426f3bc-70ae-48b5-a98d-695c0b065065",
          "scriptId": "cb0116c2-ba93-4c3f-882d-0a466aca1901",
          "execution": "d8cca29c-4e27-4b2e-8e3d-21f1c906b4f1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "CreatedAt field is in a valid date format",
          "message": "expected undefined to match /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/",
          "stack": "AssertionError: expected undefined to match /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/\n   at Object.eval sandbox-script.js:4:4)",
          "checksum": "d8f9cb226a611b420f3b830d028738e1",
          "id": "2573b79b-b8cc-4e2f-82bf-64816d110235",
          "timestamp": 1739804245058,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "1ae74ae3-8cde-4152-9085-6567c8cd1010",
          "name": "Create new user without user name",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"password\": \"dfghf\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cb0116c2-ba93-4c3f-882d-0a466aca1901",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields for successful registration\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
                  "    pm.expect(responseData.username).to.exist.and.to.be.a('string');\r",
                  "    pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
                  "    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"CreatedAt field is in a valid date format\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Email is in a valid email format\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "d8cca29c-4e27-4b2e-8e3d-21f1c906b4f1"
              }
            }
          ]
        },
        "parent": {
          "id": "7dcdce51-880a-4155-b6f6-4dae1a72a6c8",
          "name": "Create",
          "item": [
            {
              "id": "b8ba88eb-c376-4dfb-8ab2-f032e43cb847",
              "name": "Create new user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "// {\r\n//     \"username\": \"test_user_09\", \r\n//     \"password\": \"12345\", \r\n//     \"fullName\": \"Vardenis Pavardenis\", \r\n//     \"email\": \"demo@demo.com\"\r\n// }\r\n\r\n{\r\n    \"username\": \"{{registerLoginUserName}}\",\r\n    \"password\": \"{{registerLoginPassword}}\",\r\n    \"fullName\": \"Vardenis Pavardenis\",\r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "598d4ea5-95d0-47d6-bbb2-4fcb8132416f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      " \r",
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(201);\r",
                      "});\r",
                      " \r",
                      " \r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  const variableUserName = pm.collectionVariables.get(\"registerLoginUserName\");\r",
                      " \r",
                      "    console.log(\"Variable username: \" + variableUserName)\r",
                      " \r",
                      " \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                      " \r",
                      "  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      " \r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.be.a('string')\r",
                      "    .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                      "    .to.equal(variableUserName);\r",
                      " \r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string')\r",
                      "    .and.to.have.lengthOf.at.least(1, \"Full name should not be empty\")\r",
                      "    .to.equal(\"Vardenis Pavardenis\");\r",
                      " \r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.be.a('string')\r",
                      "    .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
                      "    .to.eq(\"demo@demo.com\");\r",
                      " \r",
                      "});\r",
                      " \r",
                      "pm.test(\"Response body is in JSON format\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4763b52f-29e8-4c3e-bdad-021225a160a8"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7c11470-4b17-4567-8c09-e600348145cf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Generate a unique username  by appending a timestamp\r",
                      "const uniqueUsername = \"test_user_\" + Date.now();\r",
                      "// Generate a unique password  by appending a timestamp\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      " \r",
                      "pm.collectionVariables.set(\"registerLoginUserName\", uniqueUsername)\r",
                      "pm.collectionVariables.set(\"registerLoginPassword\", uniquePassword)\r",
                      " \r",
                      "// Just print in order to check if we got value of variables by name:\r",
                      "// console.log(pm.collectionVariables.get(\"registerLoginUserName\"))\r",
                      "// console.log(pm.collectionVariables.get(\"registerLoginPassword\"))\r",
                      " \r",
                      "/*\r",
                      "    GENERATE UNIQUE USERNAME, PASSWORD AND\r",
                      "    ADD INTO REQUEST BODY\r",
                      " */\r",
                      "\r",
                      "// // Generate a unique username  by appending a timestamp\r",
                      "// const uniqueUsername = \"test_user_\" + Date.now();\r",
                      "// // Generate a unique password  by appending a timestamp\r",
                      "// const uniquePassword = \"psw\" + Date.now();\r",
                      " \r",
                      "// // create obj for request body\r",
                      "// let requestBody =  {\r",
                      "//     \"username\": uniqueUsername,\r",
                      "//     \"password\": uniquePassword,\r",
                      "//     \"fullName\": \"Vardenis Pavardenis\",\r",
                      "//     \"email\": \"demo@demo.com\"\r",
                      "// }\r",
                      " \r",
                      "// // add obj into request body\r",
                      "// pm.request.body.raw = JSON.stringify(requestBody)"
                    ],
                    "_lastExecutionId": "16128638-2710-41df-af8b-1c157913ddb9"
                  }
                }
              ]
            },
            {
              "id": "84a1213d-f50d-4f92-835b-133849c8c256",
              "name": "Create new user without email",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"test_user_06\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ac45a0c-3ab7-4337-8241-7a2a2a7172f7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body has error field\", function () {\r",
                      "    pm.response.to.have.jsonBody('error');\r",
                      "});"
                    ],
                    "_lastExecutionId": "bc2be8de-d3a2-4363-b1d8-31ab6af96a25"
                  }
                }
              ]
            },
            {
              "id": "5d562bd0-2423-4f07-b4bc-c7c795287fb6",
              "name": "Create new user with existing user name",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3178b386-a546-49e6-aa4e-4b2c4cc8e1f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for response status code 400\r",
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "\r",
                      "// Test for the presence of the required field - error\r",
                      "pm.test(\"Response has the required field - error\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "// Test for response time to be less than 300ms\r",
                      "pm.test(\"Response time is less than 300ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(300);\r",
                      "});\r",
                      "\r",
                      "// Test for Content-Type header to be application/json\r",
                      "pm.test(\"Content-Type header is application/json\", function () {\r",
                      "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "// Test for error field to be a non-empty string\r",
                      "pm.test(\"Error field is a non-empty string\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d3ba8760-52ee-4dee-8939-9405186bff9f"
                  }
                }
              ]
            },
            {
              "id": "1ae74ae3-8cde-4152-9085-6567c8cd1010",
              "name": "Create new user without user name",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"password\": \"dfghf\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cb0116c2-ba93-4c3f-882d-0a466aca1901",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields for successful registration\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
                      "    pm.expect(responseData.username).to.exist.and.to.be.a('string');\r",
                      "    pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
                      "    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"CreatedAt field is in a valid date format\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Email is in a valid email format\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d8cca29c-4e27-4b2e-8e3d-21f1c906b4f1"
                  }
                }
              ]
            },
            {
              "id": "3cc15b34-9d6f-4ea3-971e-05efed183662",
              "name": "Create new user without password",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8167e387-6d9a-4b45-893c-f7f3a1b560cc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Error message is a non-empty string\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5b426933-680c-4cf6-9616-8c67ffab7321"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3fa7435a-f94e-4d53-aa0e-6ccebcf69600",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9426f3bc-70ae-48b5-a98d-695c0b065065",
          "scriptId": "cb0116c2-ba93-4c3f-882d-0a466aca1901",
          "execution": "d8cca29c-4e27-4b2e-8e3d-21f1c906b4f1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Email is in a valid email format",
          "message": "expected undefined to match /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/",
          "stack": "AssertionError: expected undefined to match /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n   at Object.eval sandbox-script.js:5:4)",
          "checksum": "121aa3850afa0878cdbe1b6d93f9b2ce",
          "id": "57408421-c7c1-44b1-b66a-9062727b7bcd",
          "timestamp": 1739804245059,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "1ae74ae3-8cde-4152-9085-6567c8cd1010",
          "name": "Create new user without user name",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"password\": \"dfghf\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cb0116c2-ba93-4c3f-882d-0a466aca1901",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields for successful registration\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
                  "    pm.expect(responseData.username).to.exist.and.to.be.a('string');\r",
                  "    pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
                  "    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"CreatedAt field is in a valid date format\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Email is in a valid email format\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "d8cca29c-4e27-4b2e-8e3d-21f1c906b4f1"
              }
            }
          ]
        },
        "parent": {
          "id": "7dcdce51-880a-4155-b6f6-4dae1a72a6c8",
          "name": "Create",
          "item": [
            {
              "id": "b8ba88eb-c376-4dfb-8ab2-f032e43cb847",
              "name": "Create new user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "// {\r\n//     \"username\": \"test_user_09\", \r\n//     \"password\": \"12345\", \r\n//     \"fullName\": \"Vardenis Pavardenis\", \r\n//     \"email\": \"demo@demo.com\"\r\n// }\r\n\r\n{\r\n    \"username\": \"{{registerLoginUserName}}\",\r\n    \"password\": \"{{registerLoginPassword}}\",\r\n    \"fullName\": \"Vardenis Pavardenis\",\r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "598d4ea5-95d0-47d6-bbb2-4fcb8132416f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      " \r",
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(201);\r",
                      "});\r",
                      " \r",
                      " \r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  const variableUserName = pm.collectionVariables.get(\"registerLoginUserName\");\r",
                      " \r",
                      "    console.log(\"Variable username: \" + variableUserName)\r",
                      " \r",
                      " \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                      " \r",
                      "  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      " \r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.be.a('string')\r",
                      "    .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                      "    .to.equal(variableUserName);\r",
                      " \r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string')\r",
                      "    .and.to.have.lengthOf.at.least(1, \"Full name should not be empty\")\r",
                      "    .to.equal(\"Vardenis Pavardenis\");\r",
                      " \r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.be.a('string')\r",
                      "    .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
                      "    .to.eq(\"demo@demo.com\");\r",
                      " \r",
                      "});\r",
                      " \r",
                      "pm.test(\"Response body is in JSON format\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4763b52f-29e8-4c3e-bdad-021225a160a8"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7c11470-4b17-4567-8c09-e600348145cf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Generate a unique username  by appending a timestamp\r",
                      "const uniqueUsername = \"test_user_\" + Date.now();\r",
                      "// Generate a unique password  by appending a timestamp\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      " \r",
                      "pm.collectionVariables.set(\"registerLoginUserName\", uniqueUsername)\r",
                      "pm.collectionVariables.set(\"registerLoginPassword\", uniquePassword)\r",
                      " \r",
                      "// Just print in order to check if we got value of variables by name:\r",
                      "// console.log(pm.collectionVariables.get(\"registerLoginUserName\"))\r",
                      "// console.log(pm.collectionVariables.get(\"registerLoginPassword\"))\r",
                      " \r",
                      "/*\r",
                      "    GENERATE UNIQUE USERNAME, PASSWORD AND\r",
                      "    ADD INTO REQUEST BODY\r",
                      " */\r",
                      "\r",
                      "// // Generate a unique username  by appending a timestamp\r",
                      "// const uniqueUsername = \"test_user_\" + Date.now();\r",
                      "// // Generate a unique password  by appending a timestamp\r",
                      "// const uniquePassword = \"psw\" + Date.now();\r",
                      " \r",
                      "// // create obj for request body\r",
                      "// let requestBody =  {\r",
                      "//     \"username\": uniqueUsername,\r",
                      "//     \"password\": uniquePassword,\r",
                      "//     \"fullName\": \"Vardenis Pavardenis\",\r",
                      "//     \"email\": \"demo@demo.com\"\r",
                      "// }\r",
                      " \r",
                      "// // add obj into request body\r",
                      "// pm.request.body.raw = JSON.stringify(requestBody)"
                    ],
                    "_lastExecutionId": "16128638-2710-41df-af8b-1c157913ddb9"
                  }
                }
              ]
            },
            {
              "id": "84a1213d-f50d-4f92-835b-133849c8c256",
              "name": "Create new user without email",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"test_user_06\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ac45a0c-3ab7-4337-8241-7a2a2a7172f7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body has error field\", function () {\r",
                      "    pm.response.to.have.jsonBody('error');\r",
                      "});"
                    ],
                    "_lastExecutionId": "bc2be8de-d3a2-4363-b1d8-31ab6af96a25"
                  }
                }
              ]
            },
            {
              "id": "5d562bd0-2423-4f07-b4bc-c7c795287fb6",
              "name": "Create new user with existing user name",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"password\": \"12345\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3178b386-a546-49e6-aa4e-4b2c4cc8e1f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for response status code 400\r",
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "\r",
                      "// Test for the presence of the required field - error\r",
                      "pm.test(\"Response has the required field - error\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "// Test for response time to be less than 300ms\r",
                      "pm.test(\"Response time is less than 300ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(300);\r",
                      "});\r",
                      "\r",
                      "// Test for Content-Type header to be application/json\r",
                      "pm.test(\"Content-Type header is application/json\", function () {\r",
                      "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "// Test for error field to be a non-empty string\r",
                      "pm.test(\"Error field is a non-empty string\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d3ba8760-52ee-4dee-8939-9405186bff9f"
                  }
                }
              ]
            },
            {
              "id": "1ae74ae3-8cde-4152-9085-6567c8cd1010",
              "name": "Create new user without user name",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"password\": \"dfghf\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cb0116c2-ba93-4c3f-882d-0a466aca1901",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields for successful registration\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
                      "    pm.expect(responseData.username).to.exist.and.to.be.a('string');\r",
                      "    pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
                      "    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"CreatedAt field is in a valid date format\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Email is in a valid email format\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d8cca29c-4e27-4b2e-8e3d-21f1c906b4f1"
                  }
                }
              ]
            },
            {
              "id": "3cc15b34-9d6f-4ea3-971e-05efed183662",
              "name": "Create new user without password",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"test_user_01\", \r\n    \"fullName\": \"Vardenis Pavardenis\", \r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8167e387-6d9a-4b45-893c-f7f3a1b560cc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Error message is a non-empty string\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5b426933-680c-4cf6-9616-8c67ffab7321"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3fa7435a-f94e-4d53-aa0e-6ccebcf69600",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9426f3bc-70ae-48b5-a98d-695c0b065065",
          "scriptId": "cb0116c2-ba93-4c3f-882d-0a466aca1901",
          "execution": "d8cca29c-4e27-4b2e-8e3d-21f1c906b4f1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response has the required fields",
          "message": "Username should not be empty: expected 'test_user_1739804245175' to equal undefined",
          "stack": "AssertionError: Username should not be empty: expected 'test_user_1739804245175' to equal undefined\n   at Object.eval sandbox-script.js:3:6)",
          "checksum": "be03e88984d4ddd2a3693f030c463261",
          "id": "bacac810-3e14-4abd-9359-9c29428d5f0f",
          "timestamp": 1739804245216,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "97411efe-6a7c-4389-b307-fa442c945b16",
          "name": "Create new user for login",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "// {\r\n//     \"username\": \"test_user_09\", \r\n//     \"password\": \"12345\", \r\n//     \"fullName\": \"Vardenis Pavardenis\", \r\n//     \"email\": \"demo@demo.com\"\r\n// }\r\n\r\n{\r\n    \"username\": \"{{loginUserName}}\",\r\n    \"password\": \"{{loginPassword}}\",\r\n    \"fullName\": \"Vardenis Pavardenis\",\r\n    \"email\": \"demo@demo.com\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f05ec8c8-f128-42c5-9671-be52f2be4032",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  " \r",
                  "pm.test(\"Response status code is 201\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(201);\r",
                  "});\r",
                  " \r",
                  " \r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  const variableUserName = pm.collectionVariables.get(\"LoginUserName\");\r",
                  " \r",
                  "    console.log(\"Variable username: \" + variableUserName)\r",
                  " \r",
                  " \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "  pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                  " \r",
                  "  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                  " \r",
                  "  pm.expect(responseData.user.username).to.exist.and.to.be.a('string')\r",
                  "    .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                  "    .to.equal(variableUserName);\r",
                  " \r",
                  "  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string')\r",
                  "    .and.to.have.lengthOf.at.least(1, \"Full name should not be empty\")\r",
                  "    .to.equal(\"Vardenis Pavardenis\");\r",
                  " \r",
                  "  pm.expect(responseData.user.email).to.exist.and.to.be.a('string')\r",
                  "    .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
                  "    .to.eq(\"demo@demo.com\");\r",
                  " \r",
                  "});\r",
                  " \r",
                  "pm.test(\"Response body is in JSON format\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                  "});"
                ],
                "_lastExecutionId": "934aa5aa-dac6-4a31-bf15-84ea022a0358"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2ce2b657-ab77-4ad3-838d-2952a8861aaa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Generate a unique username  by appending a timestamp\r",
                  "const uniqueUsername = \"test_user_\" + Date.now();\r",
                  "// Generate a unique password  by appending a timestamp\r",
                  "const uniquePassword = \"psw\" + Date.now();\r",
                  " \r",
                  "pm.collectionVariables.set(\"loginUserName\", uniqueUsername)\r",
                  "pm.collectionVariables.set(\"loginPassword\", uniquePassword)"
                ],
                "_lastExecutionId": "701e8e72-e9f9-40aa-8740-a705a5d97858"
              }
            }
          ]
        },
        "parent": {
          "id": "0421e9e5-4214-4bbf-b5cd-09e5f656fb36",
          "name": "Login",
          "item": [
            {
              "id": "97411efe-6a7c-4389-b307-fa442c945b16",
              "name": "Create new user for login",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "// {\r\n//     \"username\": \"test_user_09\", \r\n//     \"password\": \"12345\", \r\n//     \"fullName\": \"Vardenis Pavardenis\", \r\n//     \"email\": \"demo@demo.com\"\r\n// }\r\n\r\n{\r\n    \"username\": \"{{loginUserName}}\",\r\n    \"password\": \"{{loginPassword}}\",\r\n    \"fullName\": \"Vardenis Pavardenis\",\r\n    \"email\": \"demo@demo.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f05ec8c8-f128-42c5-9671-be52f2be4032",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      " \r",
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(201);\r",
                      "});\r",
                      " \r",
                      " \r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  const variableUserName = pm.collectionVariables.get(\"LoginUserName\");\r",
                      " \r",
                      "    console.log(\"Variable username: \" + variableUserName)\r",
                      " \r",
                      " \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                      " \r",
                      "  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      " \r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.be.a('string')\r",
                      "    .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                      "    .to.equal(variableUserName);\r",
                      " \r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string')\r",
                      "    .and.to.have.lengthOf.at.least(1, \"Full name should not be empty\")\r",
                      "    .to.equal(\"Vardenis Pavardenis\");\r",
                      " \r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.be.a('string')\r",
                      "    .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
                      "    .to.eq(\"demo@demo.com\");\r",
                      " \r",
                      "});\r",
                      " \r",
                      "pm.test(\"Response body is in JSON format\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "934aa5aa-dac6-4a31-bf15-84ea022a0358"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2ce2b657-ab77-4ad3-838d-2952a8861aaa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Generate a unique username  by appending a timestamp\r",
                      "const uniqueUsername = \"test_user_\" + Date.now();\r",
                      "// Generate a unique password  by appending a timestamp\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      " \r",
                      "pm.collectionVariables.set(\"loginUserName\", uniqueUsername)\r",
                      "pm.collectionVariables.set(\"loginPassword\", uniquePassword)"
                    ],
                    "_lastExecutionId": "701e8e72-e9f9-40aa-8740-a705a5d97858"
                  }
                }
              ]
            },
            {
              "id": "f4d57f87-bdaa-41b2-8d0b-75a0fdba14ca",
              "name": "Login",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"{{loginUserName}}\",\r\n    \"password\": \"{{loginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eae14b4b-645f-4dfd-b8cf-da3f71ca4390",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content-Type header is application/json\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"User object schema is valid\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "0521d87a-b120-4c3f-b28e-29f7969d857b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "bdcc129e-1083-4329-be01-e18b3ba26fcc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "85d1432f-f517-4336-9d83-0c0245c5d031"
                  }
                }
              ]
            },
            {
              "id": "e66e0070-8ed8-47bc-af68-d2812d6fc73e",
              "name": "Login with wrong name",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"test_05\", \r\n    \"password\": \"12345\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc2f6b89-64a0-48b5-928c-be1a91c8037d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5b403dc5-ef77-436e-b92a-b79ba4e5df47"
                  }
                }
              ]
            },
            {
              "id": "4e4cdb3c-8d84-4262-b3a7-a5fb5b8259e9",
              "name": "Login with wrong psw",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"test_user_05\", \r\n    \"password\": \"1235\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ec803906-c850-4c58-b4f6-09f3c9add9fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required field 'error'\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content-Type header is application/json\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response schema matches the expected format\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('error').that.is.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "33ee1fca-7b4e-455a-afc3-ff92de7ea7e1"
                  }
                }
              ]
            },
            {
              "id": "edd70a89-82d2-4cc6-836d-2541c1c5c9e8",
              "name": "Login without psw",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"test_user_05\", \r\n    \"password\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9a98aba9-975d-419f-9d3f-9956a6f463d8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Error message is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "32c08e70-dbe1-4c4d-bade-5d392b01c6e1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "edb7eac9-6777-4f98-baa0-f83d97507408",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a0326b1f-5f5e-4ae9-848c-9643271c2846",
          "scriptId": "f05ec8c8-f128-42c5-9671-be52f2be4032",
          "execution": "934aa5aa-dac6-4a31-bf15-84ea022a0358"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response body has the expected properties",
          "message": "Username should not be empty: expected 'test_user_1739804245175' to equal undefined",
          "stack": "AssertionError: Username should not be empty: expected 'test_user_1739804245175' to equal undefined\n   at Object.eval sandbox-script.js:3:11)",
          "checksum": "55755ec844cacd0979862a6542c57afb",
          "id": "98f998e7-be98-423d-a54e-3331b5104d08",
          "timestamp": 1739804245649,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "91760365-c873-4f27-97ca-181337ca559b",
          "name": "Positive user details",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "user",
                "{{loginUserName}}"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "01cdaa7b-bec8-4a0e-8e42-51017fca44e6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const variableUserName = pm.collectionVariables.get(\"registerGetUserName\");\r",
                  "const responseData = pm.response.json();\r",
                  " \r",
                  "// Test for status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  " \r",
                  "// Test for response time\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  " \r",
                  "// Test for response body schema and properties\r",
                  "pm.test(\"Response body has the expected properties\", function () {\r",
                  "    pm.expect(responseData).to.have.property('username');\r",
                  "    pm.expect(responseData.username).to.exist.and.to.be.a('string')\r",
                  "        .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                  "        .to.equal(variableUserName);\r",
                  " \r",
                  "    pm.expect(responseData).to.have.property('fullName');\r",
                  "    pm.expect(responseData.fullName).to.exist.and.to.be.a('string')\r",
                  "        .and.to.have.lengthOf.at.least(1, \"FullName should not be empty\")\r",
                  "        .to.equal(\"Vardenis Pavardenis\");\r",
                  " \r",
                  "    pm.expect(responseData).to.have.property('email');\r",
                  "    pm.expect(responseData.email).to.exist.and.to.be.a('string')\r",
                  "        .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
                  "        .to.equal(\"demo@demo.com\");\r",
                  "});\r",
                  " \r",
                  "// Test for response headers\r",
                  "pm.test(\"Content-Type header is present and has a specific value\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\");\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                  "});"
                ],
                "_lastExecutionId": "69987108-5693-4978-9142-b22c21721c7f"
              }
            }
          ]
        },
        "parent": {
          "id": "f057e48e-ee5f-4d9b-b076-bd305b329701",
          "name": "Get user details",
          "item": [
            {
              "id": "91760365-c873-4f27-97ca-181337ca559b",
              "name": "Positive user details",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "user",
                    "{{loginUserName}}"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "01cdaa7b-bec8-4a0e-8e42-51017fca44e6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const variableUserName = pm.collectionVariables.get(\"registerGetUserName\");\r",
                      "const responseData = pm.response.json();\r",
                      " \r",
                      "// Test for status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      " \r",
                      "// Test for response time\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      " \r",
                      "// Test for response body schema and properties\r",
                      "pm.test(\"Response body has the expected properties\", function () {\r",
                      "    pm.expect(responseData).to.have.property('username');\r",
                      "    pm.expect(responseData.username).to.exist.and.to.be.a('string')\r",
                      "        .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                      "        .to.equal(variableUserName);\r",
                      " \r",
                      "    pm.expect(responseData).to.have.property('fullName');\r",
                      "    pm.expect(responseData.fullName).to.exist.and.to.be.a('string')\r",
                      "        .and.to.have.lengthOf.at.least(1, \"FullName should not be empty\")\r",
                      "        .to.equal(\"Vardenis Pavardenis\");\r",
                      " \r",
                      "    pm.expect(responseData).to.have.property('email');\r",
                      "    pm.expect(responseData.email).to.exist.and.to.be.a('string')\r",
                      "        .and.to.have.lengthOf.at.least(1, \"Email should not be empty\")\r",
                      "        .to.equal(\"demo@demo.com\");\r",
                      "});\r",
                      " \r",
                      "// Test for response headers\r",
                      "pm.test(\"Content-Type header is present and has a specific value\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\");\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "69987108-5693-4978-9142-b22c21721c7f"
                  }
                }
              ]
            },
            {
              "id": "64ac0114-ac07-4420-b976-15aa0c26c6c4",
              "name": "Negative non-existing user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "user",
                    "{{registerGetNenExitstingUserName}}"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "93b66907-3a50-4fd1-b25e-7d3856fe4f4b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const responseData = pm.response.json();\r",
                      " \r",
                      "// Test for status code\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});\r",
                      " \r",
                      "// Test for response time\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      " \r",
                      "// Test for response body schema and properties\r",
                      "pm.test(\"Response body has the expected property and value\", function () {\r",
                      "    pm.expect(responseData).to.have.property('error');\r",
                      " \r",
                      "    pm.expect(responseData.error).to.exist.and.to.be.a('string')\r",
                      "        .and.to.have.lengthOf.at.least(1, \"Username should not be empty\")\r",
                      "        .to.equal(\"User not found\");\r",
                      "});\r",
                      " \r",
                      "// Test for response headers\r",
                      "pm.test(\"Content-Type header is present and has a specific value\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\");\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9f2a8fe2-7629-4f5e-bc96-cdd9f01c6a8c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1be7356d-a286-4369-a060-9ca613acc806",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Generate a unique non-extisting username  by appending a timestamp\r",
                      "const uniqueUsername = \"non-exiting_user_\" + Date.now();\r",
                      " \r",
                      "pm.collectionVariables.set(\"registerGetNenExitstingUserName\", uniqueUsername)\r",
                      " "
                    ],
                    "_lastExecutionId": "1196b473-27f7-4d5a-9612-2ace38a09bbf"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a55f14ea-fcfe-4373-ad1c-170ffec78ea3",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9cb28544-c804-439f-8032-f50d05b8efe4",
          "scriptId": "01cdaa7b-bec8-4a0e-8e42-51017fca44e6",
          "execution": "69987108-5693-4978-9142-b22c21721c7f"
        }
      }
    ],
    "error": null
  }
}